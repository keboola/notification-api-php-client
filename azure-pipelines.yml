pr: none
trigger:
  batch: true
  branches:
    include:
      - '*'

pool:
  vmImage: ubuntu-latest

variables:
  DOCKER_BUILDKIT: 1
  k8sNamespace: 'dev-notification-client'
  ciClusterServiceConnection: 'CI AKS'

stages:
  - stage: prepare
    displayName: Prepare
    jobs:
      - job: services_setup
        variables:
          DECODE_PERCENTS: false # https://github.com/microsoft/azure-pipelines-agent/blob/master/docs/design/percentEncoding.md
        displayName: 'Setup services'
        steps:
          - task: Kubernetes@1
            displayName: kubectl login
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: $(ciClusterServiceConnection)
              command: login
          - script: |
              ./provisioning/ci-setup-cluster.sh
              echo "##vso[task.setvariable variable=NOTIFICATION_API_IP;isOutput=true]$NOTIFICATION_API_IP"
            displayName: 'Prepare cluster'
            name: prepare_cluster
            env:
              KUBERNETES_NAMESPACE: $(k8sNamespace)
              STORAGE_API_URL: $(STORAGE_API_URL)
              AWS_LOGS_S3_BUCKET: $(AWS_LOGS_S3_BUCKET)
              AWS_REGION: $(AWS_REGION)
              TEST_AWS_ACCESS_KEY_ID: $(TEST_AWS_ACCESS_KEY_ID)
              TEST_AWS_SECRET_ACCESS_KEY: $(TEST_AWS_SECRET_ACCESS_KEY)

  - stage: tests73
    dependsOn: prepare
    displayName: Build & Test PHP 7.3
    jobs:
      - job: test
        displayName: 'Test'
        variables:
          QUEUE_PUBLIC_API_IP: $[ stageDependencies.prepare.services_setup.outputs['prepare_cluster.QUEUE_PUBLIC_API_IP'] ]
        steps:
          - script: |
              set -Eeuo pipefail

              echo "Public API URL: $public_queue_api_url"

              docker-compose build --pull
              docker-compose run --rm tests73
            displayName: 'Build & Run Tests'
            env:
              test_storage_api_token: $(test_storage_api_token)
              public_queue_api_url: http://$(QUEUE_PUBLIC_API_IP):94

  - stage: tests
    dependsOn: prepare
    displayName: Build & Test
    jobs:
      - job: test
        displayName: 'Test'
        variables:
          QUEUE_PUBLIC_API_IP: $[ stageDependencies.prepare.services_setup.outputs['prepare_cluster.QUEUE_PUBLIC_API_IP'] ]
        steps:
          - script: |
              set -Eeuo pipefail

              echo "Public API URL: $public_queue_api_url"

              docker-compose build --pull
              docker-compose run --rm tests
            displayName: 'Build & Run Tests'
            env:
              test_storage_api_token: $(test_storage_api_token)
              public_queue_api_url: http://$(QUEUE_PUBLIC_API_IP):94

          - task: PublishTestResults@2
            displayName: 'Publish Test results'
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: 'build/logs/*.xml'

  - stage: cleanup
    displayName: Cleanup
    variables:
      - name: isDebugBuild
        value: ${{ startsWith(variables['Build.SourceBranch'],'refs/tags/debug') }}
    condition: eq(variables['isDebugBuild'], 'false')
    jobs:
      - job:
        displayName: Remove Services
        steps:
          - task: Kubernetes@1
            displayName: kubectl login
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: $(ciClusterServiceConnection)
              command: login

          - script: |
              set -Eeuo pipefail

              #kubectl delete deployment dev-mysql --namespace=$KUBERNETES_NAMESPACE
              #kubectl delete deployment dev-notification-api --namespace=$KUBERNETES_NAMESPACE
              #kubectl delete service dev-mysql-service --namespace=$KUBERNETES_NAMESPACE
              #kubectl delete service dev-notification-service --namespace=$KUBERNETES_NAMESPACE
              #kubectl delete secret dev-notification-environments --namespace=$KUBERNETES_NAMESPACE
              #kubectl delete configmap dev-notification-environments --namespace=$KUBERNETES_NAMESPACE
            displayName: Cleanup cluster
            env:
              KUBERNETES_NAMESPACE: $(k8sNamespace)
